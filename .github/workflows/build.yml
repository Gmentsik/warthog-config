name: build
on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'LICENSE'
      - '.git*'
      - '**.md'
      - '.vscode/*'
      - 'assets/*'
  push:
    tags:
      - 'v*'
    branches:
      - master
    paths-ignore:
      - 'LICENSE'
      - '.git*'
      - '**.md'
      - 'assets/*'
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          # - x86_64-apple-darwin
          # - aarch64-apple-darwin
          # - x86_64-pc-windows-msvc
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          # use-cross: true
          command: build
          args: --all-features --release --target=${{ matrix.target }}
      - name: Prepare the artifact folder
        run: mkdir artifact
      - name: Prepare the artifact
        run: cp "target/${TARGET}/release/warthog_config" artifact/
        if: ${{ !contains(matrix.target, 'windows') }}
        env:
          TARGET: ${{ matrix.target }}
      - name: Prepare the artifact (Windows)
        run: cp "target/${TARGET}/release/warthog_config.exe" artifact/
        if: ${{ contains(matrix.target, 'windows') }}
        env:
          TARGET: ${{ matrix.target }}
      - name: Prepare the udev rules
        run: cp config/*.rules artifact/
        if: ${{ contains(matrix.target, 'linux') }}
      - name: Get the short commit SHA
        id: slug
        run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Upload the artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.target }}-${{ steps.slug.outputs.sha7 }}
          path: artifact
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            components: clippy
            override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features -- -W clippy::pedantic
  release:
    # Only release when pushing a tag
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
      - lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Get the short commit SHA
        id: slug
        run: echo "::set-output name=sha7::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - uses: olegtarasov/get-tag@v2.1
        id: tagName
        with:
          tagRegex: "v(?<version>.*)"
      - name: Download the build artifact (Linux x64)
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-x86_64-unknown-linux-gnu-${{ steps.slug.outputs.sha7 }}
          path: release-linux-x64
      - name: Archive the build artifact (Linux x64)
        run: tar -cvzf "warthog-config-${TARGET}-${VERSION}.tar.gz" "release-${TARGET}"/*
        env:
          VERSION: ${{ steps.tagName.outputs.version }}
          TARGET: linux-x64
      # - name: Download the build artifact (macOS x64)
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: ${{ github.event.repository.name }}-x86_64-apple-darwin-${{ steps.slug.outputs.sha7 }}
      #     path: release-macos-x64
      # - name: Archive the build artifact (macOS x64)
      #   run: cd "release-${TARGET}" && zip -9 -r "../warthog-config-${TARGET}-${VERSION}.zip" *
      #   env:
      #     VERSION: ${{ steps.tagName.outputs.version }}
      #     TARGET: macos-x64
      # - name: Download the build artifact (macOS ARM64)
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: ${{ github.event.repository.name }}-aarch64-apple-darwin-${{ steps.slug.outputs.sha7 }}
      #     path: release-macos-arm64
      # - name: Archive the build artifact (macOS ARM64)
      #   run: cd "release-${TARGET}" && zip -9 -r "../warthog-config-${TARGET}-${VERSION}.zip" *
      #   env:
      #     VERSION: ${{ steps.tagName.outputs.version }}
      #     TARGET: macos-arm64
      # - name: Download the build artifact (Windows x64)
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: ${{ github.event.repository.name }}-x86_64-pc-windows-msvc-${{ steps.slug.outputs.sha7 }}
      #     path: release-windows-x64
      # - name: Archive the build artifact (Windows x64)
      #   run: cd "release-${TARGET}" && zip -9 -r "../warthog-config-${TARGET}-${VERSION}.zip" *
      #   env:
      #     VERSION: ${{ steps.tagName.outputs.version }}
      #     TARGET: windows-x64
      - name: Create a new release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          artifacts: "*.tar.*,*.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
